/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { BigNumberish } from "ethers/utils";

import { TransactionOverrides } from ".";
import { MockAggregator } from "./MockAggregator";

export class MockAggregatorFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _decimals: BigNumberish,
    _initialAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<MockAggregator> {
    return super.deploy(_decimals, _initialAnswer, overrides) as Promise<
      MockAggregator
    >;
  }
  getDeployTransaction(
    _decimals: BigNumberish,
    _initialAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(_decimals, _initialAnswer, overrides);
  }
  attach(address: string): MockAggregator {
    return super.attach(address) as MockAggregator;
  }
  connect(signer: Signer): MockAggregatorFactory {
    return super.connect(signer) as MockAggregatorFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAggregator {
    return new Contract(address, _abi, signerOrProvider) as MockAggregator;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8"
      },
      {
        internalType: "int256",
        name: "_initialAnswer",
        type: "int256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "int256",
        name: "current",
        type: "int256"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256"
      }
    ],
    name: "AnswerUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "startedBy",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startedAt",
        type: "uint256"
      }
    ],
    name: "NewRound",
    type: "event"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "getAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256"
      }
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256"
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "answeredInRound",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "latestRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256"
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "answeredInRound",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "latestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256"
      }
    ],
    name: "updateAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "_answer",
        type: "int256"
      },
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_startedAt",
        type: "uint256"
      }
    ],
    name: "updateRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103cd3803806103cd8339818101604052604081101561003357600080fd5b5080516020909101516000805460ff191660ff84161790556100548161005b565b5050610094565b60018181554260028190556003805490920180835560009081526004602090815260408083209590955592548152600590925291902055565b61032a806100a36000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639ab29f4511610076578063b5ab58dc1161005b578063b5ab58dc146101a1578063b633620c146101be578063feaf968c146101db576100be565b80639ab29f4514610153578063a87a20ce14610184576100be565b806350d25bcd116100a757806350d25bcd14610129578063668a0f02146101435780638205bf6a1461014b576100be565b80630720da52146100c3578063313ce5671461010b575b600080fd5b6100e0600480360360208110156100d957600080fd5b50356101e3565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b61011361020f565b6040805160ff9092168252519081900360200190f35b610131610218565b60408051918252519081900360200190f35b61013161021e565b610131610224565b6101826004803603608081101561016957600080fd5b508035906020810135906040810135906060013561022a565b005b6101826004803603602081101561019a57600080fd5b503561026a565b610131600480360360208110156101b757600080fd5b50356102a3565b610131600480360360208110156101d457600080fd5b50356102b5565b6100e06102c7565b600081815260046020908152604080832054600683528184205460059093529220549293919290918490565b60005460ff1681565b60015481565b60035481565b60025481565b6003848155600184905560028390556000948552600460209081526040808720959095558154865260058152848620939093555484526006909152912055565b60018181554260028190556003805490920180835560009081526004602090815260408083209590955592548152600590925291902055565b60046020526000908152604090205481565b60056020526000908152604090205481565b6003546000818152600460209081526040808320546006835281842054600590935292205483909192939456fea2646970667358221220ea5fc844e17a6e9acdf05f4a0aef95b214c12cb140360f7e7b856608dd8d789264736f6c63430006020033";
