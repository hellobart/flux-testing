/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface HistoricAggregatorInterfaceInterface extends Interface {
  functions: {
    getAnswer: TypedFunctionDescription<{
      encode([roundId]: [BigNumberish]): string;
    }>;

    getTimestamp: TypedFunctionDescription<{
      encode([roundId]: [BigNumberish]): string;
    }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRound: TypedFunctionDescription<{ encode([]: []): string }>;

    latestTimestamp: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, roundId, timestamp]: [
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    NewRound: TypedEventDescription<{
      encodeTopics([roundId, startedBy, startedAt]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class HistoricAggregatorInterface extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): HistoricAggregatorInterface;
  attach(addressOrName: string): HistoricAggregatorInterface;
  deployed(): Promise<HistoricAggregatorInterface>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): HistoricAggregatorInterface;
  once(
    event: EventFilter | string,
    listener: Listener
  ): HistoricAggregatorInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): HistoricAggregatorInterface;
  removeAllListeners(
    eventName: EventFilter | string
  ): HistoricAggregatorInterface;
  removeListener(
    eventName: any,
    listener: Listener
  ): HistoricAggregatorInterface;

  interface: HistoricAggregatorInterfaceInterface;

  functions: {
    getAnswer(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getTimestamp(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    latestAnswer(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    latestRound(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    latestTimestamp(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getAnswer(
    roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getTimestamp(
    roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  latestAnswer(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  latestRound(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  latestTimestamp(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      timestamp: null
    ): EventFilter;

    NewRound(
      roundId: BigNumberish | null,
      startedBy: string | null,
      startedAt: null
    ): EventFilter;
  };

  estimate: {
    getAnswer(roundId: BigNumberish): Promise<BigNumber>;

    getTimestamp(roundId: BigNumberish): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;

    latestRound(): Promise<BigNumber>;

    latestTimestamp(): Promise<BigNumber>;
  };
}
