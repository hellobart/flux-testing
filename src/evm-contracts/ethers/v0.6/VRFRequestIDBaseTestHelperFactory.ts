/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { VRFRequestIDBaseTestHelper } from "./VRFRequestIDBaseTestHelper";

export class VRFRequestIDBaseTestHelperFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(): Promise<VRFRequestIDBaseTestHelper> {
    return super.deploy() as Promise<VRFRequestIDBaseTestHelper>;
  }
  getDeployTransaction(): UnsignedTransaction {
    return super.getDeployTransaction();
  }
  attach(address: string): VRFRequestIDBaseTestHelper {
    return super.attach(address) as VRFRequestIDBaseTestHelper;
  }
  connect(signer: Signer): VRFRequestIDBaseTestHelperFactory {
    return super.connect(signer) as VRFRequestIDBaseTestHelperFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFRequestIDBaseTestHelper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as VRFRequestIDBaseTestHelper;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_vRFInputSeed",
        type: "uint256"
      }
    ],
    name: "makeRequestId_",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_userSeed",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_requester",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256"
      }
    ],
    name: "makeVRFInputSeed_",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610212806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806337ab429a1461003b578063bda087ae146100b1575b600080fd5b61009b6004803603608081101561005157600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506100fd565b6040518082815260200191505060405180910390f35b6100e7600480360360408110156100c757600080fd5b810190808035906020019092919080359060200190929190505050610115565b6040518082815260200191505060405180910390f35b600061010b85858585610129565b9050949350505050565b600061012183836101a3565b905092915050565b600084848484604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019450505050506040516020818303038152906040528051906020012060001c9050949350505050565b6000828260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012090509291505056fea26469706673582212200ec4da1e6b0844db21a5b123d21d091e822c7ae265a826dc50ad67505665646c64736f6c63430006020033";
