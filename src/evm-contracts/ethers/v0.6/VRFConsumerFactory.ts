/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { VRFConsumer } from "./VRFConsumer";

export class VRFConsumerFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_vrfCoordinator: string, _link: string): Promise<VRFConsumer> {
    return super.deploy(_vrfCoordinator, _link) as Promise<VRFConsumer>;
  }
  getDeployTransaction(
    _vrfCoordinator: string,
    _link: string
  ): UnsignedTransaction {
    return super.getDeployTransaction(_vrfCoordinator, _link);
  }
  attach(address: string): VRFConsumer {
    return super.attach(address) as VRFConsumer;
  }
  connect(signer: Signer): VRFConsumerFactory {
    return super.connect(signer) as VRFConsumerFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFConsumer {
    return new Contract(address, _abi, signerOrProvider) as VRFConsumer;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address"
      },
      {
        internalType: "address",
        name: "_link",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_requestId",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_randomness",
        type: "uint256"
      }
    ],
    name: "fulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "randomnessOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "requestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_seed",
        type: "uint256"
      }
    ],
    name: "requestRandomness",
    outputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106033803806106038339818101604052604081101561003357600080fd5b810190808051906020019092919080519060200190929190505050818181600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505061051f806100e46000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c80626d6cae1461005b5780631f1f897f146100795780632f47fd86146100b15780639e317f12146100cf578063dc6cfe1014610111575b600080fd5b610063610167565b6040518082815260200191505060405180910390f35b6100af6004803603604081101561008f57600080fd5b81019080803590602001909291908035906020019092919050505061016d565b005b6100b961017f565b6040518082815260200191505060405180910390f35b6100fb600480360360208110156100e557600080fd5b8101908080359060200190929190505050610185565b6040518082815260200191505060405180910390f35b6101516004803603606081101561012757600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061019d565b6040518082815260200191505060405180910390f35b60045481565b80600381905550816004819055505050565b60035481565b60026020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685878660405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102af578082015181840152602081019050610294565b50505050905090810190601f1680156102dc5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156102fd57600080fd5b505af1158015610311573d6000803e3d6000fd5b505050506040513d602081101561032757600080fd5b810190808051906020019092919050505050600061035a858430600260008a8152602001908152602001600020546103ae565b90506103836001600260008881526020019081526020016000205461042890919063ffffffff16565b60026000878152602001908152602001600020819055506103a485826104b0565b9150509392505050565b600084848484604051602001808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019450505050506040516020818303038152906040528051906020012060001c9050949350505050565b6000808284019050838110156104a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000828260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012090509291505056fea264697066735822122051fd69bc7c1e79c55d6a3b309e2699daa5ad6d3024390148daf54ddcf77a388a64736f6c63430006020033";
