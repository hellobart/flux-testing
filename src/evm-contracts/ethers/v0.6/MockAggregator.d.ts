/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MockAggregatorInterface extends Interface {
  functions: {
    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    getAnswer: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    getRoundData: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    getTimestamp: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRound: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRoundData: TypedFunctionDescription<{ encode([]: []): string }>;

    latestTimestamp: TypedFunctionDescription<{ encode([]: []): string }>;

    updateAnswer: TypedFunctionDescription<{
      encode([_answer]: [BigNumberish]): string;
    }>;

    updateRoundData: TypedFunctionDescription<{
      encode([_roundId, _answer, _timestamp, _startedAt]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, roundId, timestamp]: [
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    NewRound: TypedEventDescription<{
      encodeTopics([roundId, startedBy, startedAt]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class MockAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MockAggregator;
  attach(addressOrName: string): MockAggregator;
  deployed(): Promise<MockAggregator>;

  on(event: EventFilter | string, listener: Listener): MockAggregator;
  once(event: EventFilter | string, listener: Listener): MockAggregator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MockAggregator;
  removeAllListeners(eventName: EventFilter | string): MockAggregator;
  removeListener(eventName: any, listener: Listener): MockAggregator;

  interface: MockAggregatorInterface;

  functions: {
    decimals(): Promise<number>;

    getAnswer(arg0: BigNumberish): Promise<BigNumber>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getTimestamp(arg0: BigNumberish): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;

    latestRound(): Promise<BigNumber>;

    latestRoundData(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    latestTimestamp(): Promise<BigNumber>;

    updateAnswer(
      _answer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateRoundData(
      _roundId: BigNumberish,
      _answer: BigNumberish,
      _timestamp: BigNumberish,
      _startedAt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  decimals(): Promise<number>;

  getAnswer(arg0: BigNumberish): Promise<BigNumber>;

  getRoundData(
    _roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getTimestamp(arg0: BigNumberish): Promise<BigNumber>;

  latestAnswer(): Promise<BigNumber>;

  latestRound(): Promise<BigNumber>;

  latestRoundData(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  latestTimestamp(): Promise<BigNumber>;

  updateAnswer(
    _answer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateRoundData(
    _roundId: BigNumberish,
    _answer: BigNumberish,
    _timestamp: BigNumberish,
    _startedAt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      timestamp: null
    ): EventFilter;

    NewRound(
      roundId: BigNumberish | null,
      startedBy: string | null,
      startedAt: null
    ): EventFilter;
  };

  estimate: {
    decimals(): Promise<BigNumber>;

    getAnswer(arg0: BigNumberish): Promise<BigNumber>;

    getRoundData(_roundId: BigNumberish): Promise<BigNumber>;

    getTimestamp(arg0: BigNumberish): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;

    latestRound(): Promise<BigNumber>;

    latestRoundData(): Promise<BigNumber>;

    latestTimestamp(): Promise<BigNumber>;

    updateAnswer(_answer: BigNumberish): Promise<BigNumber>;

    updateRoundData(
      _roundId: BigNumberish,
      _answer: BigNumberish,
      _timestamp: BigNumberish,
      _startedAt: BigNumberish
    ): Promise<BigNumber>;
  };
}
